/* globals $, Dragdealer, numeral */

const PRICES = <%= data.prices.to_json %>

const SYMBOLS = {
  dollar: '$',
  pound: '$pound;'
}

const DEFAULT_START = {
  developer: 0,
  school: 3,
  university: 3
}

const DEFAULT_RANGE = {
  developer: 'month',
  school: 'year',
  university: 'year'
}

const state = {
  type: 'school',
  step: DEFAULT_START['school'],
  range: DEFAULT_RANGE['school'],
  currency: 'pound',
  dealer: null
}

const $slider = $('.slider')
const $dragWrapper = $('.slider .drag-wrapper')
const $fill = $('.slider .fill')
const $handle = $('.slider .handle')
const $countNumber = $('.slider .count .number')
const $currency = $('.slider .currency')
const $amount = $('.slider .amount')
const $range = $('.slider .range')
const $typeList = $('.slider .type-list')
const $types = $typeList.find('li.item')


const setHandleWidth = () => {
  $fill.css({
    width: $handle.position().left - $dragWrapper.offset().left
  })
}

const setup = (steps, initialStep) => {
  return new Dragdealer($dragWrapper.get(0), {
    horizontal: true,
    snap: true,
    steps: steps,
    x: (1 / steps) * initialStep,
    animationCallback(x, y) {
      setHandleWidth()

      state.step = Math.round(x * 10)
      updateDisplay()
    }
  })
}

const isSafeStep = () => {
  return state.step < PRICES[state.type].length
}

const currentSelection = () => {
  if (!isSafeStep()) {
    state.step = DEFAULT_START[state.type]
  }

  return PRICES[state.type][state.step]
}


const updateDisplay = () => {
  const current = currentSelection()
  const price = current.price[state.range][state.currency]

  $countNumber.text(numeral(current.count).format('0,0'))

  $currency.innerHTML = SYMBOLS[state.currency]
  $amount.text(numeral(price).format('0,0'))
  $range.text(state.range)
}

const stepCount = type => PRICES[type].length

const findItem = type => $typeList.find('li[data-type="' + type+ '"]')

const setType = type => {
  state.type = type
  state.range = DEFAULT_RANGE[type]
}

const setupSelector = () => {
  const $active = findItem(state.type)

  $active.addClass('active')

  $types.click(function (event) {
    $types.removeClass('active')
    $this = $(this)
    $this.addClass('active')

    setType($this.data('type'))

    // update the dealer
    state.dealer.options.steps = stepCount(state.type)
    if (!isSafeStep()) {
      state.dealer.options.x = 0
      state.dealer.options.y = 0
      state.step = DEFAULT_START[state.type]
    }

    state.dealer.init()
    state.dealer.setStep(state.step + 1)
    setHandleWidth()

    updateDisplay()
  })
}

$(() => {

  setupSelector()

  state.dealer = setup(stepCount(state.type), state.step)
  updateDisplay()
})
