<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code and Unload by Codio</title>
  <subtitle>While we code we often have lots of ideas brewing around. Ideas we'd like to unload onto you</subtitle>
  <id>https://codio.com/s/blog</id>
  <link href="https://codio.com/s/blog"/>
  <link href="https://codio.com/s/blog/feed.xml" rel="self"/>
  <updated>2013-06-07T00:00:00Z</updated>
  <author>
    <name>Codio</name>
  </author>
  <entry>
    <title>Real Time Coding</title>
    <link rel="alternate" href="https://codio.com/s/blog/2013/06/real-time-coding/"/>
    <id>https://codio.com/s/blog/2013/06/real-time-coding/</id>
    <published>2013-06-07T00:00:00Z</published>
    <updated>2013-06-07T00:00:00Z</updated>
    <author>
      <name>Joel Moss</name>
    </author>
    <summary type="html">&lt;p&gt;We have a big new feature for your enjoyment that we rolled out just yesterday. I'm excited to introduce Real Time Coding!&lt;/p&gt;

&lt;p&gt;Right from the start, we wanted Codio to be collaborative. We are after all, working in the browser, which is the perfect place...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;We have a big new feature for your enjoyment that we rolled out just yesterday. I&amp;#39;m excited to introduce Real Time Coding!&lt;/p&gt;

&lt;p&gt;Right from the start, we wanted Codio to be collaborative. We are after all, working in the browser, which is the perfect place to collaborate. So yesterday we flicked the switch on our first big collaborative feature.&lt;/p&gt;

&lt;p&gt;Real Time Coding is exactly as it sounds. You and your friends and colleagues can hack away on your code. But when any of your friends or colleagues makes a change in the code, you see it happening right there in real time. You see exactly what they type, as they type it.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s like Google Docs, but right in your code editor!&lt;/p&gt;

&lt;p&gt;Real Time Coding is available right now for everyone, and for all projects.&lt;/p&gt;

&lt;p&gt;&lt;img src="/s/img/blog/real-time-coding-ee2a33ca.gif" /&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Moving from Mercurial to Git</title>
    <link rel="alternate" href="https://codio.com/s/blog/2013/06/moving-from-mercurial-to-git/"/>
    <id>https://codio.com/s/blog/2013/06/moving-from-mercurial-to-git/</id>
    <published>2013-06-06T00:00:00Z</published>
    <updated>2013-06-06T00:00:00Z</updated>
    <author>
      <name>Joel Moss</name>
    </author>
    <summary type="html">&lt;p&gt;Since I began with Codio almost a year ago, I've wanted to move to Git - it's what I'm used to and I think it is simply superior to Mercurial. Right now we use Mercurial, and while it is very similar to Git in concept, there are some differences which...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Since I began with Codio almost a year ago, I&amp;#39;ve wanted to move to Git - it&amp;#39;s what I&amp;#39;m used to and I think it is simply superior to Mercurial. Right now we use Mercurial, and while it is very similar to Git in concept, there are some differences which are starting to hold us back a little. So I made an executive decision to migrate away from Mercurial to Git, and from BitBucket to Github.&lt;/p&gt;

&lt;p&gt;This post will attempt to explain the high level differences between Mercurial and Git, and will also compare the commands and workflow of each. It will also explain a few best practises and tips when using Git. Hopefully by the end, you will understand why we&amp;#39;re moving.&lt;/p&gt;

&lt;h2 id="toc_0"&gt;What’s the Difference?&lt;/h2&gt;

&lt;p&gt;Here’s a technical summary of the major differences between Mercurial and Git, taken from an answer to &lt;a href="http://stackoverflow.com/questions/1598759/git-and-mercurial-compare-and-contrast"&gt;this StackOverlow question&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Repository structure&lt;/strong&gt;: Mercurial doesn’t allow octopus merges (with more than two parents), nor tagging non-commit objects.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tags&lt;/strong&gt;: Mercurial uses versioned &lt;code&gt;.hgtags&lt;/code&gt; file with special rules for per-repository tags, and has also support for local tags in &lt;code&gt;.hg/localtags&lt;/code&gt;; in Git, tags are refs residing in &lt;code&gt;refs/tags/namespace&lt;/code&gt;, and by default are auto-followed on fetching and require explicit pushing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Branches&lt;/strong&gt;: In Mercurial basic workflow is based on anonymous heads; Git uses lightweight named branches, and has special kind of branches (remote-tracking branches) that follow branches in remote repository.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Revision naming and ranges&lt;/strong&gt;: Mercurial provides revision numbers, local to repository, and bases relative revisions (counting from tip, i.e. current branch) and revision ranges on this local numbering; Git provides a way to refer to revision relative to branch tip, and revision ranges are topological (based on graph of revisions).&lt;/li&gt;
&lt;li&gt;Mercurial uses rename &lt;strong&gt;tracking&lt;/strong&gt;, while Git uses rename detection to deal with file renames&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network&lt;/strong&gt;: Mercurial supports SSH and HTTP “smart” protocols; modern Git supports SSH, HTTP and GIT “smart” protocols, and HTTP(S) “dumb” protocol. Both have support for bundles files for off-line transport.&lt;/li&gt;
&lt;li&gt;Mercurial uses &lt;strong&gt;extensions&lt;/strong&gt; (plugins) and established API; Git has scriptability and established formats.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of the differences between Mercurial and Git are very subtle, and most people wouldn’t even notice them, however, there’s a fundamental difference that I’ll tackle next.&lt;/p&gt;

&lt;h2 id="toc_1"&gt;Branches&lt;/h2&gt;

&lt;p&gt;The way Git deals with branches is incredibly simple, and yet very powerful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;hg branch != git branch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Git, a branch is merely one of the many kinds of ‘refs’, and a ‘ref’ is simply a pointer to a commit. This means that there’s nothing fundamentally different between ‘branch1’ or ‘branch2’ or even ‘master’. They&amp;#39;re all pointers to commits, and these pointers can be easily be deleted, renamed, fetched, pushed, etc. You can do pretty much whatever you want with them.&lt;/p&gt;

&lt;p&gt;In Mercurial, a branch is embedded in a commit; a commit in ‘branch1’ will always remain in that branch. This means you cannot delete, or rename branches, because you would be changing the history of the commits on those branches. You can &amp;#39;close&amp;#39; branches however. These &amp;quot;named branches&amp;quot; can be better thought of as &amp;quot;commit labels&amp;quot;.&lt;/p&gt;

&lt;h2 id="toc_2"&gt;Git Commands&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s go through and compare the most used commands.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;clone&lt;/strong&gt;, &lt;strong&gt;status&lt;/strong&gt;, &lt;strong&gt;diff&lt;/strong&gt;, &lt;strong&gt;add&lt;/strong&gt;, &lt;strong&gt;rm&lt;/strong&gt;, &lt;strong&gt;push&lt;/strong&gt; and &lt;strong&gt;pull&lt;/strong&gt; are functionally the same. In fact, most commands are very similar. However there are a few exceptions and things to note.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;General&lt;/strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;commit&lt;/td&gt;
&lt;td&gt;Passing the &lt;code&gt;-a&lt;/code&gt; flag will automatically stage files that have been modified or deleted, so it is good practice to always use  this&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;add&lt;/td&gt;
&lt;td&gt;Using the &lt;code&gt;-A&lt;/code&gt; flag adds, modifies, and index entries to match the working tree. Use this instead of &lt;code&gt;hg addremove&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;push&lt;/td&gt;
&lt;td&gt;Git will try to figure out which branch you want to push and which remote to push to. But setting the following configuration, Git will push to the current branch, thus avoiding pushing all your branches, which Mercurial does: &lt;code&gt;git config --global push.default current&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pull&lt;/td&gt;
&lt;td&gt;Rebasing on pull is good practice and will make everyone’s lives easier. You should always pull with the &lt;code&gt;--rebase&lt;/code&gt; flag to avoid merge commits that result from pulling. Make it the default behaviour with: &lt;code&gt;git config --global --bool pull.rebase true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;checkout&lt;/td&gt;
&lt;td&gt;Use this to switch between branches instead of &lt;code&gt;hg up branch_name&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Branching&lt;/strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Creating&lt;/td&gt;
&lt;td&gt;&lt;code&gt;git branch BRANCH-NAME&lt;/code&gt; will create a new branch, but &lt;code&gt;git checkout -b BRANCH-NAME&lt;/code&gt; will create and then switch to the new branch.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Switching&lt;/td&gt;
&lt;td&gt;&lt;code&gt;git checkout BRANCH-NAME&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Deleting&lt;/td&gt;
&lt;td&gt;&lt;code&gt;git branch -d BRANCH-NAME&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Listing&lt;/td&gt;
&lt;td&gt;&lt;code&gt;git branch&lt;/code&gt; will list all local branches. &lt;code&gt;git branch -a&lt;/code&gt; will list all branches including those on the remote.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2 id="toc_3"&gt;Best Practices&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://mislav.uniqpath.com/2013/02/merge-vs-rebase/"&gt;This great article&lt;/a&gt; by Mislav Marohnić can be summarised as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git pull --rebase&lt;/code&gt; instead of &lt;code&gt;git pull&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git rebase -i @{u}&lt;/code&gt; before git push&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(on “feature”) &lt;code&gt;git merge master&lt;/code&gt; to make feature compatible with latest master&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(on “master”) &lt;code&gt;git merge -no-ff feature&lt;/code&gt; to ship a feature&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;However if “feature” contains only 1 commit, avoid the merge commit: (on “master”) &lt;code&gt;git cherry-pick feature&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rebasing is a much debated subject in Git-land, but &lt;a href="http://blog.izs.me/post/37650663670/git-rebase"&gt;this article&lt;/a&gt; explains it very well.&lt;/p&gt;

&lt;h2 id="toc_4"&gt;Tips&lt;/h2&gt;

&lt;p&gt;The following are a collection of useful tips and tricks that I recommend that you implement. They will make your life so much easier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Branch name in your bash prompt&lt;/strong&gt;&lt;br&gt;
This one is must-have for me, as I can always see at any time, what branch I am on. Check out these links: &lt;a href="http://code-worrier.com/blog/git-branch-in-bash-prompt/"&gt;http://code-worrier.com/blog/git-branch-in-bash-prompt/&lt;/a&gt; and &lt;br&gt;
&lt;a href="https://github.com/magicmonty/bash-git-prompt"&gt;https://github.com/magicmonty/bash-git-prompt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setup Aliases&lt;/strong&gt;&lt;br&gt;
Open up your ~/.gitconfig file and you should find an [alias] section. If not, just create one, using the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[alias]
  co = checkout
  ci = commit
  br = branch

  # friendly statuses
  st = status -sb

  # Add all unstaged changes/removals and commit. All you gotta do here is pass the commit message.
  # Example: git ac &amp;#39;My commit message&amp;#39;
  ac = !git add -A &amp;amp;&amp;amp; git commit -m

  # Pretty looking log
  lg = log --decorate --stat --graph --pretty=format:&amp;#39;%C(yellow)%h%Creset (%ar - %Cred%an%Creset), %s%n&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Love Stash&lt;/strong&gt;&lt;br&gt;
There’s plenty of occasions when I’ve been in the middle of some changes, but have been interrupted by a need to work on something else - maybe an urgent bug, or to see something in a different branch. However, I have not yet finished what I am working on and do not want to commit it yet. &lt;code&gt;git stash&lt;/code&gt; to the rescue!&lt;/p&gt;

&lt;p&gt;Just run &lt;code&gt;git stash&lt;/code&gt; and git will take your uncommitted changes, and set them aside in a safe place. You are then back to a clean working copy and can switch branches, and hack away on anything else your heart desires.&lt;/p&gt;

&lt;p&gt;When you are ready to return back, simply run &lt;code&gt;git stash pop&lt;/code&gt; to apply your last stash and remove it from the stash.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hub with Github&lt;/strong&gt;&lt;br&gt;
We will be using Github, so &lt;a href="http://defunkt.io/hub/"&gt;hub&lt;/a&gt; is extremely helpful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Looking at Pull Requests&lt;/strong&gt;&lt;br&gt;
On Github you can download patch files and apply them to your project immediately to have a look at them, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl https://github.com/karma-runner/karma/pull/559.patch | git am
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This downloads the patch and pipes it into &lt;code&gt;git am&lt;/code&gt; which simply applies the patch to your working directory. And after you are finished you can simply do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reset --hard HEAD~i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;i&lt;/code&gt; is the number of commits you want to discard. A word of warning should be added here. Doing a hard reset will DELETE stuff permanently from your repo, so be sure you know what you are deleting.&lt;/p&gt;

&lt;h2 id="toc_5"&gt;Other Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Offical Git Page &lt;a href="http://git-scm.com/"&gt;http://git-scm.com/&lt;/a&gt; and &lt;a href="http://git-scm.com/book"&gt;http://git-scm.com/book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sandofsky.com/blog/git-workflow.html"&gt;https://sandofsky.com/blog/git-workflow.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.izs.me/post/37650663670/git-rebase"&gt;http://blog.izs.me/post/37650663670/git-rebase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://training.github.com/web/free-classes/"&gt;http://training.github.com/web/free-classes/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.github.com/"&gt;https://help.github.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Best Video Training: &lt;a href="https://peepcode.com/screencasts/git"&gt;https://peepcode.com/screencasts/git&lt;/a&gt; ( $12 each but worth every cent)&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Snippets Released</title>
    <link rel="alternate" href="https://codio.com/s/blog/2013/06/snippets/"/>
    <id>https://codio.com/s/blog/2013/06/snippets/</id>
    <published>2013-06-01T00:00:00Z</published>
    <updated>2013-06-01T00:00:00Z</updated>
    <author>
      <name>Freddy May</name>
    </author>
    <summary type="html">&lt;p&gt;Hot on the heels of Inline Preview comes support for Textmate style Snippets.&lt;/p&gt;

&lt;p&gt;Snippets are a great way of reducing typing by entering shorthand code, pressing the tab key and then seeing the shorthand expand into the longhand.&lt;/p&gt;

&lt;p&gt;For example in an HTML...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Hot on the heels of Inline Preview comes support for Textmate style Snippets.&lt;/p&gt;

&lt;p&gt;Snippets are a great way of reducing typing by entering shorthand code, pressing the tab key and then seeing the shorthand expand into the longhand.&lt;/p&gt;

&lt;p&gt;For example in an HTML file ...&lt;/p&gt;

&lt;p&gt;&lt;code&gt;iframe&lt;/code&gt; + tab, expands&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;iframe src=&amp;quot;&amp;quot; frameborder=&amp;quot;0&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a CSS file ...&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bdi&lt;/code&gt; + tab, expands to &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-webkit-border-image: url();
-moz-border-image: url();
-o-border-image: url();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a JS file ...&lt;/p&gt;

&lt;p&gt;&lt;code&gt;for&lt;/code&gt; + tab expands to &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for (var i = 0; i &amp;lt; Things.length; i++) {
    Things[i]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;#39;ve made it very easy to review and search for snippets by including it right in the IDE.&lt;/p&gt;

&lt;p&gt;&lt;img alt="snippets" src="/s/img/blog/snippets-cd98b9aa.png" /&gt;&lt;/p&gt;

&lt;p&gt;Find out more by &lt;a href="/s/docs/ide/emmet/snippets/"&gt;reading the documentation&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Inline preview released</title>
    <link rel="alternate" href="https://codio.com/s/blog/2013/05/inline-preview/"/>
    <id>https://codio.com/s/blog/2013/05/inline-preview/</id>
    <published>2013-05-30T00:00:00Z</published>
    <updated>2013-05-30T00:00:00Z</updated>
    <author>
      <name>Freddy May</name>
    </author>
    <summary type="html">&lt;p&gt;We've just deployed an inline preview capability. Just press Preview and a re-sizable panel will appear beneath your code.&lt;/p&gt;

&lt;p&gt;&lt;img alt="inline preview demo" src="/s/img/blog/preview-demo-9be18d08.png"&gt;&lt;/p&gt;

&lt;p&gt;You can expand it into its own browser tab with a click in the preview header.&lt;/p&gt;

&lt;p&gt;Read more (well, not a lot more) in the &lt;a href="/s/docs/ide/ide-general/inline-preview/"&gt;documentation&lt;/a&gt;&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;We&amp;#39;ve just deployed an inline preview capability. Just press Preview and a re-sizable panel will appear beneath your code.&lt;/p&gt;

&lt;p&gt;&lt;img alt="inline preview demo" src="/s/img/blog/preview-demo-9be18d08.png" /&gt;&lt;/p&gt;

&lt;p&gt;You can expand it into its own browser tab with a click in the preview header.&lt;/p&gt;

&lt;p&gt;Read more (well, not a lot more) in the &lt;a href="/s/docs/ide/ide-general/inline-preview/"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is the latest, but by no means the last, feature to come off the production line. We&amp;#39;re going to be announcing three new ones in the next few days, so keep your eyes peeled.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Emmet support added for hi-speed HTML and CSS coding</title>
    <link rel="alternate" href="https://codio.com/s/blog/2013/05/emmet-support/"/>
    <id>https://codio.com/s/blog/2013/05/emmet-support/</id>
    <published>2013-05-24T00:00:00Z</published>
    <updated>2013-05-24T00:00:00Z</updated>
    <author>
      <name>Freddy May</name>
    </author>
    <summary type="html">&lt;p&gt;We have just added Emmet support for a whole range of features that really boost productivity when working with HTML and CSS. These features include expanding abbreviations into full HTML or CSS as well as some very powerful keyboard shortcuts.&lt;/p&gt;

&lt;p&gt;Be...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;We have just added Emmet support for a whole range of features that really boost productivity when working with HTML and CSS. These features include expanding abbreviations into full HTML or CSS as well as some very powerful keyboard shortcuts.&lt;/p&gt;

&lt;p&gt;Be sure to check out the &lt;a href="/s/docs/ide/emmet/"&gt;Codio documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a short video of it in action in the Codio IDE.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.youtube.com/v/suFLTxYDJz8?autoplay=1" class="fancybox fancybox.iframe" id="video"&gt;&lt;br&gt;
    &lt;img src="//i3.ytimg.com/vi/suFLTxYDJz8/mqdefault.jpg"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;/p&gt;

&lt;h2 id="toc_0"&gt;Basic Example&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s say you want to generate the following HTML&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    &amp;lt;ul&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just type the following and press tab&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;div&amp;gt;ul&amp;gt;li*3
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="toc_1"&gt;Juicier Example&lt;/h2&gt;

&lt;p&gt;This is more involved but shows how you can generate pretty well anything once you understand its simple language.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;page&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;logo&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;ul id=&amp;quot;navigation&amp;quot;&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;&amp;quot;&amp;gt;Item 1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;&amp;quot;&amp;gt;Item 2&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;&amp;quot;&amp;gt;Item 3&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;&amp;quot;&amp;gt;Item 4&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;&amp;quot;&amp;gt;Item 5&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is what you enter (then press tab)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#page&amp;gt;div.logo+ul#navigation&amp;gt;li*5&amp;gt;a{Item $}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="toc_2"&gt;CSS Example&lt;/h2&gt;

&lt;p&gt;There&amp;#39;s CSS support, too.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;w100p&lt;/code&gt; results in &lt;code&gt;width: 100%&lt;/code&gt;&lt;br&gt;
&lt;code&gt;m10p30e5x&lt;/code&gt; results in &lt;code&gt;margin: 10% 30em 5ex&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and how about this for gradients&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lg(left, #fc0, 30%, red)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;result in&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;background-image: -webkit-gradient(linear, 0 0, 100% 0, from(#fc0), color-stop(0.5, 30%), to(red));
background-image: -webkit-linear-gradient(left, #fc0, 30%, red);
background-image: -moz-linear-gradient(left, #fc0, 30%, red);
background-image: -o-linear-gradient(left, #fc0, 30%, red);
background-image: linear-gradient(left, #fc0, 30%, red);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="toc_3"&gt;Lorem Ipsum&lt;/h2&gt;

&lt;p&gt;There are other things you can do as well, like generating standard text&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Reiciendis expedita numquam suscipit hic molestias tenetur neque facilis et aliquam consectetur sapiente aperiam non recusandae ad minima quod saepe laborum tempora.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just use &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lorem
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="toc_4"&gt;Power Keyboard Shortcuts&lt;/h2&gt;

&lt;p&gt;As well as abbreviations, we also offer some really powerful productivity features behind kayboard shortcuts. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Matching tag pairs&lt;/li&gt;
&lt;li&gt;Jump to matching tag&lt;/li&gt;
&lt;li&gt;Wrap HTML with anotehr abbreviation&lt;/li&gt;
&lt;li&gt;Traverse between important editing points&lt;/li&gt;
&lt;li&gt;Selects important editing blocks and then traverses to the next one&lt;/li&gt;
&lt;li&gt;Add remove comment toggle for the current line or block&lt;/li&gt;
&lt;li&gt;Remove the current tag and its closing tag and adjust indentation&lt;/li&gt;
&lt;li&gt;Merge selected lines into a single line&lt;/li&gt;
&lt;li&gt;Add width and height properties to an img tag&lt;/li&gt;
&lt;li&gt;Inline calculator that lets you enter arithmetic formulae and then press tab to perform the calculation&lt;/li&gt;
&lt;li&gt;Increment and decrement CSS values by 0.1, 1 and 10&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out the &lt;a href="/s/docs/ide/emmet/"&gt;Codio documentation&lt;/a&gt; for an overview.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Mode Selection and UI Refresh</title>
    <link rel="alternate" href="https://codio.com/s/blog/2013/05/mode-selection-and-ui-refresh/"/>
    <id>https://codio.com/s/blog/2013/05/mode-selection-and-ui-refresh/</id>
    <published>2013-05-17T00:00:00Z</published>
    <updated>2013-05-17T00:00:00Z</updated>
    <author>
      <name>Joel Moss</name>
    </author>
    <summary type="html">&lt;p&gt;Hot on the heels of yesterday's &lt;a href="/s/blog/2013/05/one-click-deployment/"&gt;release of Codio:Deployment&lt;/a&gt; comes a couple of extra goodies for you.&lt;/p&gt;

&lt;p&gt;First up is a slight refresh of the UI. We like being trendy and "with it", so we tweaked our colours and made the UI a little flatter. We also decreased...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Hot on the heels of yesterday&amp;#39;s &lt;a href="/s/blog/2013/05/one-click-deployment/"&gt;release of Codio:Deployment&lt;/a&gt; comes a couple of extra goodies for you.&lt;/p&gt;

&lt;p&gt;First up is a slight refresh of the UI. We like being trendy and &amp;quot;with it&amp;quot;, so we tweaked our colours and made the UI a little flatter. We also decreased the height of the top bars, to give you even more code editing space. This, along with a set of all new clean and crisp icons, means Codio has never looked so HOT!&lt;/p&gt;

&lt;p&gt;Second is the much requested ability to quickly and easily switch modes of the file you are looking at, and an updated line and column count. Both these can be found in the status bar at the bottom of the page, when you have a file open. Codio now supports nearly 100 programming languages, and each one is now just a click away. Of course, we will still automatically detect the correct language for you, but just in case we get it wrong, or you simply want to edit your HTML as if it were Haskell (which of course we all want to do), go right ahead and change it.&lt;/p&gt;

&lt;p&gt;&lt;img src="/s/img/blog/mode-f0db53d5.gif" /&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
